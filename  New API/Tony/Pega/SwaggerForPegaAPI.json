{
	"swagger" : "2.0",
	"info" : {
		"description" :"The Pega API provides a set of built-in REST services for Pega applications. All APIs require authentication. Provide the credentials for a Pega operator in the Authorization header for each request. Pega recommends accessing APIs using TLS 1.2.",
		"version" : "v1",
		"title" : "PegaAPI"
	},
	"host" : "ecswa.ecsw.dev.cwsa.aws.centene.com",
	"basePath" : "/prweb/api/v1",
	"paths" : {

		
		
			"/attachments/upload": {
  "post": {
      "tags": ["attachments"],
      "summary": "Upload a file to be used as an attachment in a subsequent call",
      "description": "Uploads file to pega database or external storage as configured in application. An unique ID would sent back as response. This ID is needed to attach the uploaded file to a case.",
      "operationId": "uploadFile",
      "produces": ["application/json"],
      "responses": {
          "201": {
              "description": "created",
              "schema": {
                  "$ref": "#/definitions/AttachmentsUpload"
              },
              "headers": {
                  "expires": {
                      "type": "string",
                      "description": "Timestamp of expiry of the uploaded file."
                  }
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "400": {
              "description": "Invalid input",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_400"
              }
          },
          "500": {
              "description": "Internal server error",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_500"
              }
          }
      }
  }
},  

"/cases/{caseID}/attachments": {
      "post": {
          "tags": ["attachments"],
          "summary": "Attach URL and uploaded file to a case.",
          "description": "Attaches URL and uploaded file to a case.",
          "operationId": "addAttachment",
          "consumes": ["application/json"],
          "parameters": [{
              "name": "caseID",
              "in": "path",
              "description": "Case ID.",
              "required": true,
              "type": "string"
          },
          {
              "in": "body",
              "name": "requestBody",
              "description": "Attachments details. Note: url field is only required if type is URL",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/AddAttachmentRequest"
              }
          }],
          "responses": {
              "201": {
                  "description": "created"                        
              },
              "401": {
                  "description": "Unauthorized"
              },
              "400": {
                  "description": "Invalid input",
                  "schema": {
                      "$ref": "#/definitions/AttachmentErrorResponse_400"
                  }
              },
              "403": {
                  "description": "Insufficient security",
                  "schema": {
                      "$ref": "#/definitions/AttachmentErrorResponse_403"
                  }
              },
              "404": {
                  "description": "Resource not found",
                  "schema": {
                      "$ref": "#/definitions/AttachmentErrorResponse_404"
                  }
              },
              "500": {
                  "description": "Internal server error",
                  "schema": {
                      "$ref": "#/definitions/AttachmentErrorResponse_500"
                  }
              }
          }
      },
      "get": {
          "tags": ["attachments"],
          "summary": "Get list of attachments of a case",
          "description": "Get list of attachments of a case",
          "operationId": "getAttachmentList",
          "produces": ["application/json"],
          "parameters": [{
              "name": "caseID",
              "in": "path",
              "description": "Case ID.",
              "required": true,
              "type": "string"
          },
          {
              "in": "query",
              "name": "includeThumbnails",
              "description": "When set to true, thumbnail will be part of response as base 64 encoded string",
              "required": false,
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
          }],
          "responses": {
              "200": {
                  "description": "OK",
                  "schema": {
                      "$ref": "#/definitions/AttachmentListResponse"
                  }                       
              },
              "401": {
                  "description": "Unauthorized"
              },
              "404": {
                  "description": "Resource not found",
                  "schema": {
                      "$ref": "#/definitions/AttachmentErrorResponse_404"
                  }
              },
              "500": {
                  "description": "Internal server error",
                  "schema": {
                      "$ref": "#/definitions/AttachmentErrorResponse_500"
                  }
              }
          }
      }
  },  
  
  "/cases/{caseID}/attachment_categories": {        
        "get": {
            "tags": ["attachments"],
            "summary": "Get list of attachment categories applicable for a case",
            "description": "Get list of attachments categories",
            "operationId": "getAttachmentCategories",
            "produces": ["application/json"],
            "parameters": [{
                "name": "caseID",
                "in": "path",
                "description": "Case ID.",
                "required": true,
                "type": "string"
            },
            {
                "in": "query",
                "name": "type",
                "description": "Type of attachment category",
                "required": false,
                "type": "string",
                "enum": [
                  "File",
                  "URL"
                ]
            }],
            "responses": {
                "200": {
                    "description": "OK",
                    "schema": {
                        "$ref": "#/definitions/AttachmentCategories"
                    }                       
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Resource not found",
                    "schema": {
                        "$ref": "#/definitions/AttachmentErrorResponse_404"
                    }
                },
                "500": {
                    "description": "Internal server error",
                    "schema": {
                        "$ref": "#/definitions/AttachmentErrorResponse_500"
                    }
                }
            }
        }
    },  
"/attachments/{attachmentID}": {
  "get": {
      "tags": ["attachments"],
      "summary": "Get attachment",
      "description": "For file attachment content would be sent back as base64 encoded string. For URL, link will be sent in plain text. For correspondence, HTML content would be the response.",
      "operationId": "getAttachment",
      "produces": ["text/plain", "text/html"],
      "parameters": [{
          "name": "attachmentID",
          "in": "path",
          "description": "Attachment ID.",
          "required": true,
          "type": "string"
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema" : {
                    "$ref": "#/definitions/AttachmentListItem"
               },
		      "headers": {
                  "content-disposition": {
                      "type": "string",
                      "description": "Contains File name and mime type"
                  },
                  "content-type": {
                      "type": "string",
                      "description": "Response type"
                  },
                  "transfer-encoding": {
                      "type": "string",
                      "description": "Encoding technique used to encode the reponse. E.g. - base64"
                  }
              }   
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Insufficient security",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_403"
              }
          },
          "404": {
              "description": "Resource not found",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_404"
              }
          },
          "424": {
              "description": "Dependent resource fail",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_424"
              }
          },
          "500": {
              "description": "Internal server error",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_500"
              }
          }
      }
  },
  "delete": {
      "tags": ["attachments"],
      "summary": "Delete attachment",
      "description": "Link between the case and attachment would be deleted and if attachment doesn't have any other link accessing it, then attachment would be deleted as well.",
      "operationId": "deleteAttachment",
      "parameters": [{
          "name": "attachmentID",
          "in": "path",
          "description": "Attachment ID.",
          "required": true,
          "type": "string"
      }],
      "responses": {
          "200": {
              "description": "OK"         
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Insufficient security",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_403"
              }
          },
          "404": {
              "description": "Resource not found",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_404"
              }
          },
          "424": {
              "description": "Dependent resource fail",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_424"
              }
          },
          "500": {
              "description": "Internal server error",
              "schema": {
                  "$ref": "#/definitions/AttachmentErrorResponse_500"
              }
          }
      }
  }
},  
"/casetypes": {
  "get": {
      "tags": ["casetypes"],
      "summary": "Get case types",
      "description": "Gets the case types from the authenticated user's application.",
      "operationId": "getCaseTypes",
      "produces": ["application/json"],
      "parameters": [],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/CaseTypesResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},

"/casetypes/{ID}": {
  "get": {
      "tags": ["casetypes"],
      "summary": "Get case type details [DX]",
      "description": "Gets details about a given case type, including its fields, either with full layout information or as a list.",
      "operationId": "getCaseTypeInfo",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "CaseType ID",
          "required": true,
          "type": "string"
      }, {
          "name": "flatListOfFields",
          "in": "query",
          "description": "if a flat list without a layout structure is desired, select Full for all UI based attributes or Basic for attributes limited to insure successful validation",
          "required": false,
          "type": "string",
          "enum": [
              "Full",
              "Basic"
          ]               
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/CaseTypeDetailResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},  

"/casetypes/{ID}/refresh": {
  "put": {
      "tags": ["casetypes"],
      "summary": "Refresh casetype details [DX]",
      "description": "Provide field updates to receive an updated creation page, including its fields.",
      "operationId": "putCaseTypeCreationInfo",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "CaseType ID",
          "required": true,
          "type": "string"
      }, {
          "name": "refreshFor",
          "in": "query",
          "description": "field (or unique identifier of UI element) triggering refresh",
          "required": false,
          "type" : "string"
      }, {
          "name": "requestBody",
          "in": "body",
          "description": "updated fields",
          "required": true,
          "schema": {
              "$ref" : "#/definitions/ContentRequest"
          }
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/CaseTypeDetailResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},  

"/assignments": {
  "get": {
      "tags": ["assignments"],
      "summary": "Get assignments",
      "description": "Returns the authenticated user's list of assignments.",
      "operationId": "getAssignments",
      "produces": ["application/json"],
      "parameters": [],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/AssignmentsResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},
"/assignments/{ID}": {
  "get": {
      "tags": ["assignments"],
      "summary": "Get assignment details",
      "description": "Returns a single assignment's details given its ID (or) Returns the next available assignment for the requestor if 'next' is passed.",
      "operationId": "getAssignmentDetails",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Assignment ID/'next'",
          "required": true,
          "type": "string"
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/AssignmentResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "No assignment found or available",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  },
  "post": {
      "tags": ["assignments"],
      "summary": "Perform assignment action",
      "description": "Performs an action on an assignment given its ID and an optional content in the request body.",
      "operationId": "performAssignmentAction",
      "consumes": ["application/json"],
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Assignment ID",
          "required": true,
          "type": "string"
      }, {
          "name": "actionID",
          "in": "query",
          "description": "Assignment action to perform",
          "required": true,
          "type": "string"
      }, {
          "name": "saveOnly",
          "in": "query",
          "description": "Save field updates only; not submitting for processing",
          "required": false,
          "type": "boolean"
      }, {
          "in": "body",
          "name": "requestBody",
          "description": "Content should mirror the clipboard structure",
          "required": false,
          "schema": {
              "$ref": "#/definitions/ContentRequest"
          }
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/AssignmentPostResponse"
              }
          },
          "400": {
              "description": "Bad request",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},

"/assignments/{ID}/actions/{actionID}": {
  "get": {
      "tags": ["assignments"],
      "summary": "Get action details as applied to this assignment [DX]",
      "description": "Returns details about an action that can be performed against this assignment, including its fields, either within the view or as a list.",
      "operationId": "getAssignmentActionInfo",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Assignment ID",
          "required": true,
          "type": "string"
      }, {
          "name": "actionID",
          "in": "path",
          "description": "Assignment action ID",
          "required": true,
          "type": "string"
      }, {
          "name": "flatListOfFields",
          "in": "query",
          "description": "if a flat list without a layout structure is desired, select Full for all UI based attributes or Basic for attributes limited to insure successful validation",
          "required": false,
          "type": "string",
          "enum": [
              "Full",
              "Basic"
          ]
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/ActionResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},

"/assignments/{ID}/actions/{actionID}/refresh": {
  "put": {
      "tags": ["assignments"],
      "summary": "Refresh action details for this assignment [DX]",
      "description": "Provide field updates to receive the updated view/fields of this action.",
      "operationId": "putAssignmentActionInfo",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Assignment ID",
          "required": true,
          "type": "string"
      }, {
          "name": "actionID",
          "in": "path",
          "description": "Assignment action ID",
          "required": true,
          "type": "string"
      }, {
          "name": "refreshFor",
          "in": "query",
          "description": "field (or unique identifier of UI element) triggering refresh",
          "required": false,
          "type" : "string"               
      }, {
          "name": "requestBody",
          "in": "body",
          "description": "updated fields",
          "required": true,
          "schema": {
              "$ref" : "#/definitions/ContentRequest"
          }
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/ActionResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},

"/cases": {
  "get": {
      "tags": ["cases"],
      "summary": "Get cases",
      "description": "Gets all cases that the authenticated user has created in the default work pool.",
      "operationId": "getCases",
      "produces": ["application/json"],
      "parameters": [],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/CasesResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  },
  "post": {
      "tags": ["cases"],
      "summary": "Create a new case",
      "description": "Creates a new case of the given type. \nThe HTTP response header *Location* contains the URI of the newly created case.",
      "operationId": "createCase",
      "consumes": ["application/json"],
      "produces": ["application/json"],
      "parameters": [{
          "in": "body",
          "name": "requestBody",
          "description": "Input parameters (content, pageInstructions) are needed only for CaseTypes without CreateStage configuration.",
          "required": true,
          "schema": {
              "$ref": "#/definitions/CreateCaseRequest"
          }
      }],
      "responses": {
          "201": {
              "description": "Created",
              "schema": {
                  "$ref": "#/definitions/CreateCaseResponse"
              },
              "headers": {
                  "Location": {
                      "type": "string",
                      "description": "Contains the URI of the newly created case"
                  },
                  "ETag": {
                      "type": "string",
                      "description": "Value of the entity tag that must be passed as If-Match header in the request to update case API"
                  }
              }
          },
          "400": {
              "description": "Bad request",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},
"/cases/{ID}": {
  "get": {
      "tags": ["cases"],
      "summary": "Get case details",
      "description": "Gets the details of a case given its ID.",
      "operationId": "getCaseDetails",
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Case ID",
          "required": true,
          "type": "string"
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/CaseResponse"
              },
              "headers": {
                  "ETag": {
                      "type": "string",
                      "description": "Value of the entity tag that must be passed as If-Match header in the request to update case API"
                  }
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  },
  "put": {
      "tags": ["cases"],
      "summary": "Update a case",
      "description": "Performs an action given a case ID and an optional content in the request body.",
      "operationId": "updateCase",
      "consumes": ["application/json"],
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Case ID",
          "required": true,
          "type": "string"
      },  {
          "name": "actionID",
          "in": "query",
          "description": "Local action or a stage local action to perform",
          "required": false,
          "type": "string"
      },  {
          "name": "If-Match",
          "in": "header",
          "description": "Value of the entity tag that is received as ETag header in responses to create case and get case details APIs",
          "required": true,
          "type": "string"
      },  {
          "in": "body",
          "name": "requestBody",
          "description": "Content should mirror the clipboard structure",
          "required": false,
          "schema": {
              "$ref": "#/definitions/ContentRequest"
          }
      }],
      "responses": {
          "204": {
              "description": "No content",
              "headers": {
                  "ETag": {
                      "type": "string",
                      "description": "Value of the entity tag that must be passed as If-Match header in the request to update case API"
                  }
              }
          },
          "400": {
              "description": "Bad request",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "412": {
              "description": "Precondition failed",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},


"/cases/{ID}/pages/{pageID}": {
  "get": {
      "tags": ["cases"],
      "summary": "Get page details [DX]",
      "description": "Gets layout details of a page for a given case.",
      "operationId": "getCasePageDetails",
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Case ID",
          "required": true,
          "type": "string"
          },  {
          "name": "pageID",
          "in": "path",
          "description": "Page ID",
          "required": true,
          "type": "string"    
          }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/Page"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},

"/cases/{ID}/views/{viewID}": {
  "get": {
      "tags": ["cases"],
      "summary": "Get view details [DX]",
      "description": "Gets layout details of a view for a given case.",
      "operationId": "getCaseViewDetails",
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Case ID",
          "required": true,
          "type": "string"
          },  {
          "name": "viewID",
          "in": "path",
          "description": "View ID",
          "required": true,
          "type": "string"
          }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/View"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},  

"/cases/{ID}/actions/{actionID}": {
  "get": {
      "tags": ["cases"],
      "summary": "Get action details as applied to this case [DX]",
      "description": "Returns details about an action that can be performed against this case, including its fields, either with full layout information or as a list.",
      "operationId": "getCaseActionInfo",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Case ID",
          "required": true,
          "type": "string"
      }, {
          "name": "actionID",
          "in": "path",
          "description": "Case-wide action ID",
          "required": true,
          "type": "string"
      }, {
          "name": "flatListOfFields",
          "in": "query",
          "description": "if a flat list without a layout structure is desired, select Full for all UI based attributes or Basic for attributes limited to insure successful validation",
          "required": false,
          "type": "string",
          "enum": [
              "Full",
              "Basic"
          ]               
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/ActionResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},  


"/cases/{ID}/actions/{actionID}/refresh": {
  "put": {
      "tags": ["cases"],
      "summary": "Refresh action details for this case [DX]",
      "description": "Provide field updates to receive an updated case-wide action view.",
      "operationId": "putCaseActionInfo",
      "produces": ["application/json"],
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Case ID",
          "required": true,
          "type": "string"
      }, {
          "name": "actionID",
          "in": "path",
          "description": "Case-wide action ID",
          "required": true,
          "type": "string"
      }, {
          "name": "refreshFor",
          "in": "query",
          "description": "field (or unique identifier of UI element) triggering refresh",
          "required": false,
          "type" : "string"               
      }, {
          "name": "requestBody",
          "in": "body",
          "description": "updated fields",
          "required": true,
          "schema": {
              "$ref" : "#/definitions/ContentRequest"
          }
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/ActionResponse"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},  

"/documents": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get documents",
  "description": "Gets all the documents the authenticated user has access to. Use filterBy parameter to retrieve documents by Name (OperatorID?), creation date etc.",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "filterBy",
      "in": "query",
      "description": "filterBy",
      "required": false,
      "type": "string"
    },
    {
      "name": "searchFor",
      "in": "query",
      "description": "searchFor",
      "required": false,
      "type": "string"
    }
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/DocumentsResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
}
},
"/documents/{ID}": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get document details",
  "description": "Return details of the document for the given document ID”. Note that for documents created by uploading files, this API will only return the metadata. The uploaded file content will not be returned",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "ID",
      "in": "path",
      "description": "ID",
      "required": true,
      "type": "string"
    }
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/DocumentDetailsResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404" : {
      "description": "Document not found"
    }
  }
}
},

"/messages": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get messages",
  "description": "Retrieve messages for a given context",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "filterBy",
      "in": "query",
      "description": "if filtering by context, specify it in filterFor",
      "required": false,
      "type": "string",
      "enum": [
          "context",
          "bookmarkfeed",
          "followfeed",
          "spacefeed",
          "mentionfeed",
          "profilefeed",
          "repliesfeed"
      ]
    },
    {
      "name": "filterFor",
      "in": "query",
      "description": "context or user ID",
      "required": false,
      "type": "string"
    },    
    {
      "name": "pageSize",
      "in": "query",
      "description": "max entries to return",
      "required": false,
      "type": "integer"
    },
    {
      "name": "olderThan",
      "in": "query",
      "description": "Only return entries older than this date time",
      "required": false,
      "type": "string",
      "format" : "date-time"
    }       
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/ListOfMessages"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
},
"post": {
  "tags": [
    "collaboration"
  ],
  "summary": "Create message",
  "description": "Create a message",
  "produces": [
    "application/json"
  ],
  "parameters": [{
          "in": "body",
          "name": "requestBody",
          "description": "Fields needed to create a message",
          "required": true,
          "schema": {
              "$ref": "#/definitions/CreateMessageRequest"
          }
      }
  ],
  "responses": {
    "201": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/CreateMessageResponse"
      }
    },
    "400": {
      "description": "Bad request"
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
}   
},  

"/notifications": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get notifications",
  "description": "Retrieve notifications",
  "produces": [
    "application/json"
  ],
  "parameters": [
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/NotificationsResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
},
"post": {
  "tags": [
    "collaboration"
  ],
  "summary": "Create notification",
  "description": "Create a notification",
  "produces": [
    "application/json"
  ],
  "parameters": [{
          "in": "body",
          "name": "requestBody",
          "description": "Fields needed to create a notification",
          "required": true,
          "schema": {
              "$ref": "#/definitions/CreateNotificationRequest"
          }
      }
  ],
  "responses": {
    "201": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/CreateNotificationResponse"
      }
    },
    "400": {
      "description": "Bad request"
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
}   
},      

"/spaces": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get spaces",
  "description": "Fetches all the spaces present in the application",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "filterBy",
      "in": "query",
      "description": "filterBy",
      "required": false,
      "type": "string"
    },
    {
      "name": "searchFor",
      "in": "query",
      "description": "searchFor",
      "required": false,
      "type": "string"
    },
    {
      "name": "showUnlisted",
      "in": "query",
      "description": "showUnlisted",
      "required": false,
      "type": "string"
    }
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/SpacesResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
}
},
"/spaces/{ID}": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get space details",
  "description": "Get space details",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "ID",
      "in": "path",
      "description": "ID",
      "required": true,
      "type": "string"
    }
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/SpaceDetailsResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404" : {
      "description": "Space not found"
    }       
  }
}
},
"/spaces/{ID}/join": {
"put": {
  "tags": [
    "collaboration"
  ],
  "summary": "Join space",
  "description": "Join space",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "ID",
      "in": "path",
      "description": "ID",
      "required": true,
      "type": "string"
    }
  ],
  "responses": {
    "201": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/LeaveOrJoinSpaceResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404" : {
      "description": "Space not found"
    } 
  }
}
},
"/spaces/{ID}/leave": {
"put": {
  "tags": [
    "collaboration"
  ],
  "summary": "Leave space",
  "description": "Leave space",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "ID",
      "in": "path",
      "description": "ID",
      "required": true,
      "type": "string"
    }
  ],
  "responses": {
    "201": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/LeaveOrJoinSpaceResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404" : {
      "description": "Space not found"
    } 
  }
}
},
"/spaces/{ID}/pins": {
"get": {
  "tags": [
    "collaboration"
  ],
  "summary": "Get pins for the given space",
  "description": "Get pins for the given space",
  "produces": [
    "application/json"
  ],
  "parameters": [
    {
      "name": "ID",
      "in": "path",
      "description": "Space ID",
      "required": true,
      "type": "string"
    },
    {
      "name": "filterBy",
      "in": "query",
      "description": "filterBy",
      "required": false,
      "type": "string"
    },
    {
      "name": "searchFor",
      "in": "query",
      "description": "searchFor",
      "required": false,
      "type": "string"
    }
  ],
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/SpacePinsResponse"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404" : {
      "description": "Space not found"
    } 
  }
}
},

  "/data/{ID}": {
  "get": {
      "tags": ["data"],
      "summary": "Get data view contents",
      "description": "Gets the contents of a data view given its name and parameters.\nParameters are passed in as query string parameters. For example, if you have a data view called D_Customer with parameters \"ID\" and \"Company\" you could access the data view with the URL https://myco.org/prweb/api/v1/data/D_Customer?ID=1&Company=MyCo.\n\"Try it out\" note: When testing with \"try it out\" below you cannot enter values for data view parameters to use as part of the test. This means only data views without required parameters can be tested below.",
      "operationId": "getDataPage",
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Data view identifier",
          "required": true,
          "type": "string"
      }],
      "responses": {
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
},
"/data/{ID}/metadata": {
  "get": {
      "tags": ["data"],
      "summary": "Get data view metadata",
      "description": "Gets the metadata of a data view given its name.",
      "operationId": "getDataPageMetadata",
      "parameters": [{
          "name": "ID",
          "in": "path",
          "description": "Data view identifier",
          "required": true,
          "type": "string"
      }],
      "responses": {
          "200": {
              "description": "OK",
              "schema": {
                  "$ref": "#/definitions/DataPageMetadata"
              }
          },
          "401": {
              "description": "Unauthorized"
          },
          "403": {
              "description": "Forbidden",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          },
          "404": {
              "description": "Not found",
              "schema": {
                  "$ref": "#/definitions/ErrorResponse"
              }
          }
      }
  }
}
		
		
		
		
				
		
		
	},

	
	"definitions" : {

		
		
			"CasesResponse" : {
"properties" : {
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement"
},
"cases" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/Case"
 }
}
}
},

"Case" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK E-26"
},
"parentCaseID" : {
 "type" : "string",
 "example" : "MyCo-PAC-Work"
},
"caseTypeID" : {
 "type" : "string",
 "example" : "MyCo-PAC-Work-ExpenseReport"
},
"name" : {
 "type" : "string",
 "example" : "ExpenseReport"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Case"
},
"stage" : {
 "type" : "string",
 "example" : "Stage 1"
},
"status" : {
 "type" : "string",
 "example" : "New"
},
"urgency" : {
 "type" : "string",
 "example" : "90"
},
"createTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"createdBy" : {
 "type" : "string",
 "example" : "John Doe"
},
"lastUpdateTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T20:00:44.443Z"
},
"lastUpdatedBy" : {
 "type" : "string",
 "example" : "manager@pmf.com"
}
}
},

"CaseTypesResponse" : {
"properties" : {
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement"
},
"caseTypes" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/CaseType"
 }
}
}
},

"AssignmentsResponse" : {
"properties" : {
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement"
},
"assignments" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/Assignment"
 }
}
}
},

"Assignment" : {
"properties" : {
"caseID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK E-278"
},
"executedDeadlineTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"executedGoalTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T08:00:44.443Z"
},
"ID" : {
 "type" : "string",
 "example" : "ASSIGN-WORKLIST MYCO-PAC-WORK E-278!PZDEFAULTSTAGESTEP"
},
"name" : {
 "type" : "string",
 "example" : "Default step"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Assignment"
},
"routedTo" : {
 "type" : "string",
 "example" : "user1"
},
"scheduledDeadlineTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"scheduledGoalTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"type" : {
 "type" : "string",
 "example" : "Worklist"
},
"urgency" : {
 "type" : "string",
 "example" : "10"
},
"instructions" : {
 "type" : "string",
 "example" : "Default stage"
}
}
},

"AssignmentPostResponse" : {
"properties" : {
"nextAssignmentID" : {
 "type" : "string",
 "example" : "ASSIGN-WORKLIST MYCO-PAC-WORK E-110!PYSTARTCASE"
},
"nextPageID" : {
 "type" : "string",
 "example" : "Confirm"
}
}
},

"ContentRequest" : {
"properties" : {
"content" : {
   "$ref" : "#/definitions/Content"
},
"pageInstructions" : {
   "type" : "array",
   "items" : {
     "$ref" : "#/definitions/pageInstruction"
   }
},
"attachments": {
  "type" : "array",
  "items" : {
    "$ref" : "#/definitions/attachments"
    }
}
}
},

"Content" : {
"type" : "object"
},

"pageInstruction" : {
"properties" : {
 "instruction" : {
   "type" : "string",
   "example" : "APPEND",
 "enum": [
			"DELETE",
			"REPLACE",
			"UPDATE",
			"APPEND",
			"INSERT",
			"MOVE",
			"ADD"
  ],
   "description" : "DELETE, REPLACE, UPDATE are common amongst embedded pages, pagelists & pagegroups. Pagelists also support APPEND, INSERT, & MOVE.  Pagegroups have ADD"
},
"target" : {
   "type" : "string",
   "example" : "myPageList",
   "description" : "Reference to the embedded page, pagelist, or pagegroup.  Doesn't need to start with a leading dot"
},
"listIndex" : {
   "type" : "integer",
   "example" : "3",
   "description" : "Use this to specify a pagelist index for the DELETE, REPLACE, UPDATE, INSERT, and MOVE instructions"
},
"groupIndex" : {
   "type" : "string",
   "example" : "Customer",
   "description" : "Use this to specify a pagegroup subscript for the ADD, DELETE, REPLACE, and UPDATE instructions"
},
 "listMoveToIndex" : {
   "type" : "integer",
   "example" : "5",
   "description" : "Use this to specify a pagelist index for the MOVE instruction to indicate the new position"
},
  "content" : {
   "type" : "object",
   "description" : "Content is expected for all instructions except DELETE and MOVE.  REPLACE, ADD, APPEND, and INSERT merge in the pyDefault data transform to the new page"
}
}
},

"attachments" : {
"properties" : {
 "type" : {
   "type" : "string",
   "example" : "File",
 "enum": [
			"File",
			"URL"
  ],
   "description" : "Determines the type of attachment"
},
"attachmentFieldName" : {
   "type" : "string",
   "example" : "myAttachmentField",
   "description" : "Reference to the attachment field property.  Should not start with a leading dot"
},
"category" : {
   "type" : "string",
   "example" : "myFile",
   "description" : "The category of attachment"
},
"name" : {
   "type" : "string",
   "example" : "myAttachment",
   "description" : "Name of the attachment. No need to add this field in request, if name matches uploaded file name"
},
 "ID" : {
   "type" : "string",
   "example" : "213e8449-102e-492d-b883-afdf64da0d78",
   "description" : "ID received upon uploading a file using POST /attachments/upload"
},
 "delete" : {
   "type" : "boolean",
   "example" : "false",
"enum": [
			"true",
			"false"
  ],
   "description" : "This should be Include only while submitting form, an already attachment field needs to be cleared. If delete = true, type has to be File along with a valid attachment field name. Not other field should be included in request payload for this attachment. "
}
}
},

"CreateCaseRequest" : {
"required" : [ "caseTypeID" ],
"properties" : {
"caseTypeID" : {
 "type" : "string",
 "example" : "MyCo-PAC-Work-ExpenseReport"
},
"processID" : {
 "type" : "string",
 "example" : ""
},
"parentCaseID" : {
 "type" : "string",
 "example" : ""
},
"content" : {
 "$ref" : "#/definitions/Content"
},
"pageInstructions" : {
   "type" : "array",
   "items" : {
     "$ref" : "#/definitions/pageInstruction"
   }
},
"attachments": {
  "type" : "array",
  "items" : {
    "$ref" : "#/definitions/attachments"
    }
}
}
},

"CreateCaseResponse" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK E-107"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Case"
},
"nextAssignmentID" : {
"type" : "string",
"example" : "ASSIGN-WORKLIST MYCO-PAC-WORK E-110!PYSTARTCASE"
},
"nextPageID" : {
"type" : "string",
"example" : "Confirm"
}
}
},

"CaseUpdateResponse" : {
"properties" : {
"nextAssignmentID" : {
"type" : "string",
"example" : "ASSIGN-WORKLIST MYCO-PAC-WORK E-110!PYSTARTCASE"
},
"nextPageID" : {
"type" : "string",
"example" : "Confirm"
}
}
},

"AssignmentResponse" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "ASSIGN-WORKLIST MYCO-PAC-WORK E-110!PYSTARTCASE"
},
"caseID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK E-110"
},
"name" : {
 "type" : "string",
 "example" : "ExpenseReport"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Assignment"
},
"type" : {
 "type" : "string",
 "example" : "Worklist"
},
"routedTo" : {
 "type" : "string",
 "example" : "user1"
},
"instructions" : {
 "type" : "string",
 "example" : "Default step"
},
"scheduledGoalTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"executedGoalTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"scheduledDeadlineTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"executedDeadlineTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"urgency" : {
 "type" : "string",
 "example" : "10"
},
"actions" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/AssignmentAction"
 }
}
}
},

"AssignmentAction" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "AddExpense"
},
"name" : {
 "type" : "string",
 "example" : "Add expense"
},
"type" : {
 "type" : "string",
 "example" : "Assignment"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Action"
}
}
},

"CaseTypeDetailResponse" : {
"properties" : {
"caseTypeID" : {
 "type" : "string",
 "example" : "MyCo-PAC-Work-Timesheet"
},
"creation_page" : {
"$ref" : "#/definitions/Page"
}

}
},

"CaseResponse" : {
"properties" : {
"status" : {
 "type" : "string",
 "example" : "New"
},
"caseTypeID" : {
 "type" : "string",
 "example" : "MyCo-PAC-Work-Timesheet"
},
"name" : {
 "type" : "string",
 "example" : "Timesheet"
},
"ID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK T-240"
},
"parentCaseID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK T-200"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Case"
},
"stage" : {
 "type" : "string",
 "example" : "PRIM1"
},
"urgency" : {
 "type" : "string",
 "example" : "15"
},
"createTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"createdBy" : {
 "type" : "string",
 "example" : "administrator@pmf.com"
},
"lastUpdateTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T22:00:44.443Z"
},
"lastUpdatedBy" : {
 "type" : "string",
 "example" : "manager@pmf.com"
},
"owner" : {
 "type" : "string",
 "example" : "user@pmf.com"
},
"content" : {
 "$ref" : "#/definitions/Content"
},
"stages" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/Stage"
 }
},
"SLA" : {
 "$ref" : "#/definitions/SLA"
},
"childCases" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/ChildCase"
 }
},
"childCaseTypes" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/CaseType"
 }
},
"assignments" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/CaseAssignment"
 }
},
"actions" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/Action"
 }
}
}
},

"Stage" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "PRIM1"
},
"name" : {
 "type" : "string",
 "example" : "Stage 1"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Stage"
}
}
},

"Action" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "AddExpense"
},
"name" : {
 "type" : "string",
 "example" : "Add expense"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Action"
}
}
},

"ChildCase" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "MYCO-PAC-WORK S-240"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Case"
}
}
},

"CaseType" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "MyCo-PAC-Work-ExpenseReport"
},
"name" : {
 "type" : "string",
 "example" : "Expense Report"
},
"CanCreate" : {
"type" : "boolean",
"example" : "true"
},	
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-CaseType"
},
"startingProcesses" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/StartingProcess"
 }
}
}
},

"StartingProcess" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "pyStartCase"
},
"name" : {
 "type" : "string",
 "example" : "Add Expense"
},
"requiresFieldsToCreate" : {
 "type" : "boolean",
 "example" : "true"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Process"
}
}
},

"SLA" : {
"properties" : {
"stageSLAGoal" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"stageSLADeadline" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T18:00:44.443Z"
},
"overallSLAGoal" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"overallSLADeadline" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T18:00:44.443Z"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-SLA"
}
}
},

"CaseAssignment" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "ASSIGN-WORKLIST MYCO-PAC-WORK E-110!PYSTARTCASE"
},
"name" : {
 "type" : "string",
 "example" : "ExpenseReport"
},
"type" : {
 "type" : "string",
 "example" : "Worklist"
},
"pxObjClass" : {
 "type" : "string",
 "example" : "Pega-API-CaseManagement-Assignment"
},
"routedTo" : {
 "type" : "string",
 "example" : "user1"
},
"instructions" : {
 "type" : "string",
 "example" : "10"
},
"scheduledGoalTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"executedGoalTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"scheduledDeadlineTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"executedDeadlineTime" : {
 "type" : "string",
 "format" : "date-time",
 "example" : "2015-02-05T13:00:44.443Z"
},
"urgency" : {
 "type" : "string",
 "example" : "10"
},
"actions" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/Action"
 }
}
}
},

"ActionResponse": {
"type": "object",
"properties": {
	"actionID": {
		"type": "string",
		"example" : "Resolve"
	},
	"caseID": {
		"type": "string",
		"example" : "MYCO-PAC-WORK C-27"
	},
	"name": {
		"type": "string",
		"example" : "Resolve action"
	},
	"view": {
		"$ref": "#/definitions/View"
	}
}
},  

"Page": {
"type": "object",
"properties": {
	"pageID": {
		"type": "string",
		"example" : "Review"
	},
	"name": {
		"type": "string",
		"example" : "Review page"
	},			
	"appliesTo" : {
		"type" : "string",
		"example": "MyCo-PAC-Work"
	},
	"caseTypeID": {
		"type": "string",
		"example" : "Purchase Request"
	},			
	"groups": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/TopPageGroup"
		}
	},
	"validationMessages": {
		"type": "string",
		"example" : "Unable to obtain credit score",
		"description" : "This may be returned by the '.../refresh' apis, if the user's edits caused a non-field-specific error"
	}			
}
},	

"View": {
"type": "object",
"properties": {
	"reference": {
		"type": "string",
		"example" : "myEmbeddedPage"
	},	
	"validationMessages": {
		"type": "string",
		"example" : "Unable to obtain credit score",
		"description" : "This may be returned by the '.../refresh' apis, if the user's edits caused a non-field-specific error"
	},			
	"viewID": {
		"type": "string",
		"example": "CoreSummary"
	},
	"name": {
		"type": "string",
		"example": "Core fields summary"
	},
	"appliesTo": {
		"type" : "string",
		"example" : "MyCo-PAC-Work"
	},			
	"visible": {
		"type": "boolean",
		"example" : "true"
	},
	"groups": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/TopViewGroup"
		}
	}
}
},

"TopPageGroup": {
"type": "object",
"properties": {
	"layout": {
		"$ref": "#/definitions/Layout"
	}
}
},	

"TopViewGroup": {
"type": "object",
"properties": {
	"layout": {
		"$ref": "#/definitions/Layout"
	},
	"view": {
		"$ref": "#/definitions/View"
	}
}
},	

"Group": {
"type": "object",
"properties": {
	"layout": {
		"$ref": "#/definitions/Layout"
	},		
	"field": {
		"$ref": "#/definitions/Field"
	},
	"view": {
		"$ref": "#/definitions/View"
	},			
	"paragraph": {
		"$ref": "#/definitions/Paragraph"
	},
	"caption": {
		"$ref": "#/definitions/Caption"
	},
	"newRow" : {
		"$ref": "#/definitions/NewRow"
	}
}
}, 

"Layout": {
"type": "object",
"properties": {
	"titleFormat": {
		"type": "string",
		"description" : "Styles are Heading 1, Heading 2, Heading 3, Heading 4, Heading 5, and Heading 6."
	},
	"containerFormat": {
		"type": "string"
	},	
	"groupFormat": {
		"type": "string",
		"enum": [
			"Grid",
			"Dynamic",
			"Inline"
		],
		"description" : "SCREENLAYOUT can be header, header_footer, footer, content_only, header_left_right, header_left. SIMPLELAYOUT can be Default, Stacked, Inline, Inline grid double, Inline grid triple."
	},			
	"layoutFormat": {
		"type": "string",
		"enum": [
			"SCREENLAYOUT",
			"SIMPLELAYOUT",
			"NONE",
			"TABLELAYOUT",
			"REPEATINGLAYOUT"
		],
		"description" : "Layouts in the topmost group of a Page use SCREENLAYOUT.  All other layouts can be SIMPLELAYOUT, TABLELAYOUT, or REPEATINGLAYOUT."
	},
	"title": {
		"type": "string",
		"description" : "This field is encoded to prevent cross-site scripting"
	},
	"visible": {
		"type": "boolean",
		"example" : "true"
	},	
	"view": {
		"$ref": "#/definitions/View"
	},			
	"groups": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Group"
		}
	},			
	"reference": {
		"type": "string",
		"description" : "Set when the layoutFormat is TABLELAYOUT or REPEATINGLAYOUT."
	},
	"sourceType": {
		"type": "string",
		"enum": [
			"Property",
			"DataPage"
		],
		"description" : "Whether this layout is sourced from a property or data page; set when the layoutFormat is TABLELAYOUT or REPEATINGLAYOUT."
	},	
	"fieldListID": {
		"type": "string",
		"example" : "OrderItems"
	},			
	"referenceType": {
		"type": "string",
		"description" : "List or Group; set when the layoutFormat is TABLELAYOUT or REPEATINGLAYOUT."
	},			
	"header": {
		"$ref": "#/definitions/Header"
	},	
	"newRow": {
		"$ref": "#/definitions/NewRow"
	},
	"rows": {
		"type": "array",
		"items" : {
			"$ref": "#/definitions/Row"
		}
	},
	"readOnly" : {
		"type": "boolean",
		"example": "false",
		"description" : "For pagelist/pagegroup to show as readonly"
	},
	"repeatRowOperations" : {
		"$ref": "#/definitions/RepeatRow"
	},
	"repeatLayoutFormat" : {
		"type" : "string"
	},
	"repeatContainerFormat" : {
		"type" : "string"
	}
}
},

"Header": {
"type": "object",
"properties": {
	"groups": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Group"
		}
	}	
}
},

"Row": {
"type": "object",
"properties": {
	"groups": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Group"
		}
	},	
	"testID" : { 
		"type": "string",
		"description" : "A unique number that can be used for test referencing, for row it will be appended with -R1, -R2, etc and for RDL it will be appended with -1, -2, etc"
	},
	"groupIndex" : {
		"type" : "string",
		"description" : "For a grid populated by a group, where each row has a text-based key"
	}
}
},	

"NewRow": {
"type": "object",
"properties": {
	"groups": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Group"
		}
	},	
	"testID" : { 
		"type": "string",
		"description" : "A unique number that can be used for test referencing, for row it will be appended with -R1, -R2, etc and for RDL it will be appended with -1, -2, etc"
	}			
}
},

"Caption": {
"type": "object",
"properties": {
	"columnImportance": {
		"type": "string",
		"example" : "primary",
		"description" : "Used for the column header layout, a primary column remains when the browser width is shrunk, a secondary column moves into the primary, and other means the column can be lost",
		"enum" : [
			"primary",
			"secondary",
			"other"
		]
	},		
	"captionFor": {
		"type": "string",
		"example" : "purchaseAmount",
		"description" : "while fields usually have a label as part of them, a caption element may be bound to a field but not part of it"
	},		
	"control": {
		"$ref": "#/definitions/Control"
	},			
	"value": {
		"type": "string",
		"example" : "Enter the amount",
		"description" : "This field is encoded to prevent cross-site scripting"
	},
	"format": {
		"type": "string"
	},
	"testID" : {
		"type" : "string"
	}
}
},	





"Field": {
"type": "object",
"properties": {
	"reference": {
		"type": "string",
		"example" : "Dependent.Age",
		"description" : "the path in the case hierarchy to this field"
	},	
	"validationMessages": {
		"type": "string",
		"example" : "The child age must be between 0 and 18",
		"description" : "In the .../refresh APIs, field level errors are returned"
	},	
        "validateAs": {
		"type": "string",
		"example" : "ageValidator",
		"description" : "Name of the Edit-Validate rule configured on property rule of this field"
	},			
	"fieldID": {
		"type": "string",
		"example": "Age"
	},
	"name" : {
		"type": "string",
		"example": "?",
		"description" : "this comes from the property rule of the field"
	},
	"readOnly": {
		"type": "boolean",
		"example" : "false",
		"description" : "whether to show this read-only or not"
	},		
	"visible": {
		"type": "boolean",
		"example": "true",
		"description" : "whether field should be shown currently or not"
	},	
	"labelReserveSpace": {
		"type": "boolean",
		"example" : "true",
		"description" : "whether to reserve space for a missing label"
	},	
	"label": {
		"type": "string",
		"example" : "Child's age",
		"description" : "This is the label on the field element in the view.  It is encoded to prevent cross-site scripting."
	},	
	"showLabel": {
		"type": "boolean",
		"example" : "true",
		"description" : "only available for pxButton, pxIcon, and pxLink"
	},		
	"required": {
		"type": "boolean",
		"example": "false"
	},		
	"labelFormat": {
		"type": "string",
		"example" : "standard"
	},
	"disabled" : {
		"type": "boolean",
		"example": "true"
	},
	"value": {
		"type": "string",
		"example" : "18",
		"description" : "This field is encoded to prevent cross-site scripting"
	},
	"maxLength": {
		"type": "integer",
		"example" : "32",
		"description" : "maximum length for the value of this field"
	},
	"expectedLength": {
		"type": "integer",
		"example" : "10",
		"description" : "expected length for the value of this field, useful for identifying how wide the text box should be"
	},			
	"type": {
		"type": "string",
		"enum": [
			"Text",
			"Identifier",
			"None",
			"Email",
			"Decimal",
			"Date",
			"DateTime",
			"TimeOfDay",
			"Integer",
			"Password",
			"TextEncrypted",
			"TrueFalse"
		],
		"example" : "Text",
		"description" : "Text, Decimal, etc."
	},	
	"control": {
		"$ref": "#/definitions/Control"
	},			
	"testID": {
		"type": "string",
		"description" : "unique ID for testing"
	}
}
},

"Control": {
"type": "object",
"properties": {
	"type": {
		"type": "string",
		"example" : "pxDropDown",
		"description" : "the type of control will determine the fields that appear in modes"
	},
	"modes": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Mode"
		}
	},
	"actionSets": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/ActionSet"
		}
	},
	"label": {
		"type": "string",
		"example" : "Press here for more details",
		"description" : "label for the button or link.  This field is encoded to prevent cross-site scripting."
	}		
}
},

"RepeatRow": {
"type": "object",
"properties": {
	"rowEditing" : {
		"type" : "string",
		"example": "masterDetail",
		"description" : "How to edit rows in a repeating layoutNOTE: if readOnly, then all fields will besent as readOnly",
		"enum": [
			"readOnly",
			"row",
			"masterDetail"
		]
	},
	"editingInlineType" : {
		"type": "string",
		"example": "readWrite",
		"enum": [
			"row",
			"readWrite"
		],
		"description": "Available when rowEditing is 'row'; row means click to edit, readWrite means inline editable"
	}
}
},

"Mode": {
"type": "object",
"properties": {
	"modeType" : {
		"type": "string",
		"enum" : [
			"editable",
			"readOnly",
			"ignore"
		],
		"example" : "editable"
	},
	"controlFormat": {
		"type": "string",
		"example" : "Standard"
	},	
	"textAlign" : {
		"type" : "string",
		"enum" : [
			"Left",
			"Right"
		],
		"example" : "Right"
	},
	"tooltip" : {
		"type" : "string",
		"description": "This is encoded to prevent cross-site scripting"
	},
	"maxChar" : {
		"type" : "string"
	},
	"minChars" : {
		"type": "string"
	},
	"formatType" : {
		"type": "string",
		"enum" : [
			"none",
			"text",
			"date",
			"datetime",
			"email",
			"number",
			"tel",
			"url",
			"truefalse",
			"advancedtext"
		],
		"example" : "datetime"
	},
	"specifySize" : {
		"type" : "string",
		"example" : "auto"
	},
	"showReadOnlyValidation" : {
		"type" : "boolean"
	},
	"listSource": {
		"type": "string",
		"example": "datapage",
		"enum": [
			"promptlist",
			"locallist",
			"datapage"
		],
		"description" : "used with controls pxAutoComplete/pxDropDown/pxRadioButtons; list can be sourced from promptlist, locallist, or datapage"
	},
	"options": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Option"
		},
		"description" : "used with controls pxAutoComplete/pxDropDown/pxRadioButtons; when listSource is set to promptlist or locallist, contains the dropdown contents"
	},			
	"dataPageID": {
		"type": "string",
		"example" : "D_GetTeams",
		"description" : "used with controls pxAutoComplete/pxDropDown/pxRadioButtons; when listSource is set to datapage"
	},
	"dataPageValue": {
		"type": "string",
		"example": "TeamName",
		"description" : "used with controls pxAutoComplete/pxDropDown/pxRadioButtons; when listSource is set to datapage, field in the data page response to use for the value"
	},
	"dataPagePrompt": {
		"type": "string",
		"example": "TeamName",
		"description" : "used with controls pxAutoComplete/pxDropDown/pxRadioButtons; when listSource is set to datapage, field in the data page response to use for the prompt"
	},
	"dataPageTooltip" : {
		"type": "string"
	},
	"enableGrouping" : {
		"type" : "boolean"
	},
	"groupBy" : {
		"type" : "string"
	},
	"groupOrder" : {
		"type" : "string",
		"enum" : [
			"asc",
			"desc"
		]
	},
	"maxResults" : {
		"type" : "string"
	},
	"minResults" : {
		"type" : "string"
	},
	"minSearch" : {
		"type" : "string"
	},
	"clipboardPageID" : {
		"type" : "string"
	},
	"clipboardPageValue" : {
		"type": "string"
	},
	"clipboardPagePrompt" : {
		"type" : "string"
	},
	"clipboardPageTooltip" : {
		"type" : "string"
	},
	"obfuscated" : {
		"type" : "boolean"
	},
	"dateFormat" : {
		"type" : "string",
		"enum" : [
			"Date-Short",
			"Date-Short-YYYY",
			"Date-Short-Custom",
			"Date-Short-Custom-YYYY",
			"Date-Medium",
			"Date-DayMonthYear-Custom",
			"Date-Full",
			"Date-Long",
			"Date-ISO-8601",
			"Date-Gregorian-1",
			"Date-Gregorian-2",
			"Date-Gregorian-3"
		],
		"example" : "Date-Short"
	},
	"dateTimeFormat" : {
		"type" : "string",
		"enum" : [
			"DateTime-Short",
			"DateTime-Short-Custom",
			"DateTime-Short-YYYY-Custom",
			"DateTime-Short-YYYY",
			"DateTime-Medium",
			"DateTime-DayMonthYear-Custom",
			"DateTime-Full",
			"DateTime-Long",
			"DateTime-Frame",
			"DateTime-Frame-Short",
			"DateTime-ISO-8601",
			"DateTime-Gregorian-1",
			"DateTime-Gregorian-2",
			"DateTime-Gregorian-3"
		],
		"example" : "DateTime-Short"
	},	
	"customDateFormat" : {
		"type" : "string"
	},
	"showAs24HourFormat" : {
		"type" : "boolean"
	},
	"linkType" : {
		"type" : "string",
		"example" : "url",
		"description" : "used with control pxLink",
		"enum" : [
			"one",
			"email",
			"tel",
			"url"
		]
	},		
	"linkData" : {
		"type" : "string",
		"example" : "www.yahoo.com",
		"description" : "used with control pxLink"				
	},		
	"linkImageSource" : {
		"type" : "string",
		"example" : "styleClass",
		"description" : "used with control pxLink",
		"enum": [
			"none",
			"image",
			"property",
			"styleclass"
		]
	},	
	"linkImagePosition" : {
		"type" : "string",
		"example" : "left",
		"description" : "used with control pxLink",
		"enum" : [
			"left", 
			"right"
		]
	},	
	"linkImage" : {
		"type" : "string"
	},
	"linkProperty" : {
		"type" : "string"
	},
	"linkStyle" : {
		"type" : "string",
		"example" : "pi pi-checkmark",
		"description" : "used with control pxLink"
	},
	"iconSource" : {
		"type" : "string",
		"example" : "standardicon",
		"enum" : [
			"standardicon",
			"image",
			"exturl",
			"property",
			"styleclass"
		],
		"description" : "used with control pxIcon to determine its image source"
	},	
	"iconStandard" : {
		"type" : "string",
		"example" : "pxIconDeleteItem",
		"description" : "used with control pxIcon, when iconSource is standardicon",
		"enum" : [
			"pxIcon",
			"pxIconAddItem",
			"pxIconAddNewWork",
			"pxIconAttachments",
			"pxCancel",
			"pxIconContents",
			"pxIconDeleteItem",
			"pxIconEnableActionSection",
			"pxIconExpandCollapse",
			"pxIconExplore",
			"pxIconFinishAssignment",
			"pxIconGetNextWork",
			"pxIconHistory",
			"pxIconLocalAction",
			"pxIconPrint",
			"pxIconReopenWorkItem",
			"pxIconReview",
			"pxIconSave",
			"pxIconShowFlowLocation",
			"pxIconShowHarness",
			"pxIconShowReopenScreen",
			"pxIconSpellChecker",
			"pxIconUpdate"
		]
	},		
	"iconImage" : {
		"type" : "string",
		"description" : "used with control pxIcon, when iconSource is image"
	},	
	"iconUrl" : {
		"type" : "string",
		"description" : "used with control pxIcon, when iconSource is exturl"
	},			
	"iconProperty" : {
		"type" : "string",
		"description" : "used with control pxIcon, when iconSource is property"
	},				
	"iconStyle" : {
		"type" : "string",
		"description" : "used with control pxIcon, when iconSource is styleclass"
	},
	"captionPosition" : {
		"type" : "string"
	},
	"placeholder" : {
		"type" : "string",
		"example" : "Select...",
		"description" : "placeholder text, typically used with a dropdown where a choice hasn't been made yet"
	},			
	"orientation" : {
		"type" : "string",
		"example" : "vertical",
		"description" : "used with control pxRadioButtons, either 'vertical' or 'horizontal'",
		"enum" : [
			"vertical",
			"horizontal"
		]
	},
	"wrapAfter" : {
		"type" : "integer",
		"example" : "5",
		"description" : "used with control pxRadioButtons, the number of radio buttons after which it wraps, so if the value is 3 and there are 5 buttons the first row would have 3, the second 2"
	},
	"lightWeightAutoComplete" : {
		"type" : "boolean"
	},
	"displayAsComboBox" : {
		"type" : "boolean"
	},
	"displayFullScreen" : {
		"type" : "boolean"
	},
	"allowFreeFormInput" : {
		"type" : "boolean"
	},
	"dateTime" : {
		"type" : "string",
		"enum" : [
			"auto",
			"date",
			"datetime",
			"time"
		]
	},
	"displayMode" : {
		"type" : "string",
		"enum" : [
			"calendar",
			"dropdowns",
			"textinput",
			"oneinput",
			"twoinput",
			"button"
		]
	},
	"displayLongFormat" : {
		"type" : "boolean"
	},
	"ignoreLocaleSettings" : {
		"type" : "boolean"
	},
	"showReadOnlyFormatting" : {
		"type" : "boolean"
	},
	"calendarNavigation" : {
		"type" : "string",
		"enum" : [
			"true",
			"false"
		]
	},
	"allowTextEntry" : {
		"type" : "boolean",
		"description" : "if true allow text entry of date, if false use the calendar icon"
	}
}
},

"ActionSet": {
"type": "object",
"properties": {
	"actions": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/ClientAction"
		}
	},
	"events": {
		"type": "array",
		"items": {
			"$ref": "#/definitions/Event"
		}
	}
}
},

"ClientAction": {
"type": "object",
"properties": {
	"action": {
		"type": "string",
		"enum" : [
			"postValue",
			"refresh",
			"setValue",
			"takeAction",
			"openUrlInWindow",
			"runScript"
		]
	},
	"refreshFor" : {
		"type" : "string",
		"description" : "either name of control or unique ID"
	},
	"actionProcess" : {
		"$ref": "#/definitions/ActionProcess"
	}
}
},

"ActionProcess" : {
"type" : "object",
"properties": {
	"setValuePairs" : {
		"type" : "array",
		"items" : {
			"$ref" : "#/definitions/ValuePairs"
		}
	},
	"functionParameters" : {
		"type" : "array",
		"items" : {
			"$ref" : "#/definitions/FunctionParams"
		}
	},
	"actionName" : {
		"type" : "string"
	},				
	"urlBase" : {
		"type" : "string"
	},	
	"windowName" : {
		"type" : "string"
	},	
	"windowOptions" : {
		"type" : "string"
	},
	"alternateDomain" : {
		"$ref" : "#/definitions/AltDomain"
	},
	"queryParams" : {
		"type" : "array",
		"items" : {
			"$ref" : "#/definitions/QueryParams"
		}
	}
}
},

"ValuePairs" : {
"type" : "object",
"properties": {
	"value" : {
		"type" : "string"
	},
	"name" : {
		"type" : "string"
	},
	"valueReference" : {
		"$ref" : "#/definitions/ValueReference"
	}
}
},

"FunctionParams" : {
"type" : "object",
"properties": {
	"value" : {
		"type" : "string"
	},
	"name" : {
		"type" : "string"
	},
	"valueReference" : {
		"$ref" : "#/definitions/ValueReference"
	}
}
},

"QueryParams" : {
"type" : "object",
"properties": {
	"value" : {
		"type" : "string"
	},
	"name" : {
		"type" : "string"
	},
	"valueReference" : {
		"$ref" : "#/definitions/ValueReference"
	}
}
},

"AltDomain" : {
"type":"object",
"properties" : {
	"url" : {
		"type" : "string"
	},
	"urlReference" : {
		"$ref" : "#/definitions/URLReference"
	}
}
},

"ValueReference" : {
"type" : "object",
"properties" : {
	"reference" : {
		"type" : "string"
	},
	"lastSavedValue" : {
		"type" : "string",
		"description" : "The last saved value is encoded to protect against cross-site scripting"
	}
}
},

"URLReference" : {
"type" : "object",
"properties" : {
	"reference" : {
		"type" : "string"
	},
	"lastSavedValue" : {
		"type" : "string",
		"description" : "The last saved value is encoded to protect against cross-site scripting"
	}
}
},	

"Event": {
"type": "object",
"properties": {
	"event": {
		"type": "string",
		"enum" : [
			"click",
			"doubleclick",
			"focus",
			"hover",
			"rightclick",
			"load",
			"enter",
			"up",
			"down",
			"left", 
			"right",
			"esc",
			"tab",
			"any",
			"change",
			"playing",
			"pause",
			"ended",
			"onLoad"
		]
	}
}
},

"Option": {
"properties": {
	"value": {
		"type": "string",
		"example": "Critical",
		"description" : "Will be the same as the key for a locallist, but different for a promptlist"
	},
	"key": {
		"type": "string",
		"example" : "Critical"
	}
}
},

"Paragraph": {
"type": "object",
"properties": {
	"visible": {
		"type": "boolean",
		"example" : "true"
	},
	"appliesTo": {
		"type" : "string"
	},
	"paragraphID": {
		"type": "string"
	},
	"readOnly" : {
		"type" : "boolean"
	},
	"value": {
		"type": "string",
		"example" : "A paragraph about things",
		"description" : "This is typically html content.  It is encoded to prevent against cross-site scripting."
	}
}
},

"ListOfMessages" : {
"properties" : {
"entryCount" : {
	"type" : "integer",
	"example" : 3
},
"pageFirstEntry" : {
	"type" : "string",
	"format" : "date-time",
	"example" : "20190617T165841.000 GMT"
},
"pageLastEntry" : {
	"type" : "string",
	"format" : "date-time",
	"example" : "20190617T165820.000 GMT"
},	
"messages" : {
	"type" : "array",
	"items" : {
		"$ref" : "#/definitions/MessagesResponse"
	}
}
}
},

"MessagesResponse": {
"properties" : {
"context" : {
	"type" : "string",
	"example" : "OTL165-PURCHASEREQUEST-WORK D-231"
},
"contextDescription" : {
	"type" : "string",
	"example" : "Purchase Request"
},
"contextID" : {
	"type" : "string",
	"example" : "D-231"
},
"contextType" : {
	"type" : "string",
	"example" : "case"
},
"currentContext" : {
	"type": "string",
	"example" : "case"
},
"ID" : {
	"type" : "string",
	"example" : "PEGASOCIAL M-67"
},
"message" : {
	"type" : "string",
	"example" : "That's a great idea"
},
"postedBy" : {
	"type" : "string",
	"example" : "marik"
},
"postedTime" : {
	"type" : "string",
	"format" : "date-time",
	"example" : "2019-06-17T16:58:41.000Z"
},
"updatedTime" : {
	"type" : "string",
	"format" : "date-time",
	"example" : "2019-06-17T16:58:41.000Z"			
},
"replies" : {
	"type" : "array",
	"items" : {
		"$ref" : "#/definitions/MessageReplies"
	}		
}
}
},   

"MessageReplies" : {
"properties" : {
"context" : {
	"type" : "string",
	"example" : "OTL165-PURCHASEREQUEST-WORK D-231"
},
"currentContext" : {
	"type": "string",
	"example" : "case"
},
"ID" : {
	"type" : "string",
	"example" : "PEGASOCIAL M-67"
},
"message" : {
	"type" : "string",
	"example" : "That's a great idea"
},
"postedBy" : {
	"type" : "string",
	"example" : "marik"
},
"postedTime" : {
	"type" : "string",
	"format" : "date-time",
	"example" : "2019-06-17T16:58:41.000Z"
}
}
},

"postMessageRequest" : {
"type":"object",
"properties" : {
"context" : {
    "type" : "string",
    "example" : "MYCO-PAC-WORK C-27"
},
"message" : {
 "type" : "string",
 "example" : "I think that's a good idea"
}
}

},

"CreateMessageRequest" : {
"required" : [ "messageText" ],
"properties":{
"postMessage":{
    "$ref": "#/definitions/postMessageRequest"
}
}

},

"CreateMessageResponse" : {
"properties" : {
"ID" : {
 "type" : "string",
 "example" : "PEGASOCIAL-MESSAGE M-67"
}
}
}, 

"DocumentsResponse" : {
"properties" : {
    "pxObjClass" : {
      "type" : "string",
      "example" : "Pega-API-CaseManagement-Document"
    },
    "createdByName" : {
      "type" : "string",
      "example" : "Vinesh"
    },
    "lastUpdatedBy" : {
      "type" : "string",
      "example" : "ketiv"
    },
    "createdBy" : {
      "type" : "string",
      "example" : "ketiv"
    },
    "createTime" : {
      "type" : "string",
      "example" : "2019-05-03T08:53:17.000Z"
    },
    "ID" : {
      "type" : "string",
      "example" : "PEGASOCIAL-DOCUMENT DOC-974"
    },
    "title" : {
      "type" : "string",
      "example" : "About Pega"
    },
    "lastUpdatedByName" : {
      "type" : "string",
      "example" : "Vinesh"
    },
    "lastUpdateTime" : {
      "type" : "string",
      "example" : "2019-05-03T08:56:58.000Z"
    }
  }
},

"DocumentDetailsResponse" : {
"properties" : {
    "pxObjClass" : {
      "type" : "string",
      "example" : "Pega-API-CaseManagement-Document"
    },
    "createdByName" : {
      "type" : "string",
      "example" : "Vinesh"
    },
    "lastUpdatedBy" : {
      "type" : "string",
      "example" : "ketiv"
    },
    "createdBy" : {
      "type" : "string",
      "example" : "ketiv"
    },
    "createTime" : {
      "type" : "string",
      "example" : "2019-05-03T08:53:17.830Z"
    },
    "documentAccessibleTo" : {
      "type" : "string",
      "example" : "Public"
    },
    "documentContent" : {
      "type" : "string",
      "example" : "<p>Pegasystems Inc. is the leader in software for customer engagement and operational excellence. Pega&rsquo;s adaptive, cloud-architected software &ndash; built on its unified Pega Platform&trade; &ndash; empowers people to rapidly deploy and easily extend and change applications to meet strategic business needs. Over its 35-year history, Pega has delivered award-winning capabilities in CRM and digital process automation (DPA) powered by advanced artificial intelligence and robotic automation, to help the world&rsquo;s leading brands achieve breakthrough business results.</p>"
    },
    "ID" : {
      "type" : "string",
      "example" : "PEGASOCIAL-DOCUMENT DOC-974"
    },
    "title" : {
      "type" : "string",
      "example" : "About Pega"
    },
    "lastUpdatedByName" : {
      "type" : "string",
      "example" : "Vinesh"
    },
    "lastUpdateTime" : {
      "type" : "string",
      "example" : "2019-05-03T08:56:58.612Z"
    }
}
},

"NotificationsResponse" : {
"type" : "object"
},
"CreateNotificationRequest" : {
"type" : "object"
}, 

"CreateNotificationResponse" : {
"type" : "object"
},  

"SocialGroupsResponse": {
"properties" : {
"groupID" : {
	"type" : "string",
	"example" : "leave this for Jim"
}
}
},  

"DataPageMetadata" : {
"properties" : {
"dataTypeID" : {
 "type" : "string",
 "example" : "Data-Rule-AppMetadata"
},
"description" : {
 "type" : "string",
 "example" : "This page contains data explorer information to be displayed"
},
"usage" : {
 "type" : "string",
 "example" : "Data explorer information"
},
"ID" : {
 "type" : "string",
 "example" : "D_pyDataExplorer"
},
"name" : {
 "type" : "string",
 "example" : "D_pyDataExplorer"
},
"structure" : {
 "type" : "string",
 "example" : "list"
},
"parameters" : {
 "type" : "array",
 "items" : {
  "$ref" : "#/definitions/Parameter"
 }
}
}
},



"Parameter" : {
"properties" : {
"name" : {
 "type" : "string",
 "example" : "AppName"
},
"description" : {
 "type" : "string",
 "example" : "Application name"
},
"dataType" : {
 "type" : "string",
 "example" : "STRING"
},
"required" : {
 "type" : "string",
 "example" : "false"
},
"defaultValue" : {
 "type" : "string",
 "example" : "MyApp:07.10"
}
}
},

"spaces-owner": {
  "properties": {
    "name": {
      "type": "string",
      "example": "Satish Raj Kumar P"
    },
    "ID": {
      "type": "string",
      "example": "rajks"
    }
  }
},
"SpacesResponse": {
  "properties": {
    "spaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/spaces-groups"
      }
    }
  }
},
"spaces-groups": {
  "properties": {
    "owner": {
      "$ref": "#/definitions/spaces-owner"
    },
    "accessType": {
      "type": "string",
      "example": "PUBLIC"
    },
    "memberCount": {
      "type": "string",
      "example": "3"
    },
    "name": {
      "type": "string",
      "example": "test 26"
    },
    "description": {
      "type": "string",
      "example": "test 26"
    },
    "ID": {
      "type": "string",
      "example": "PEGASOCIAL-GROUP SPACE-2093"
    }
  }
},

"spaces-spacehierarchy": {
  "properties": {
    "entryIndex": {
      "type": "string",
      "example": "1"
    },
    "entryName": {
      "type": "string",
      "example": "Test23"
    },
    "entryID": {
      "type": "string",
      "example": "PEGASOCIAL-GROUP SPACE-2090"
    }
  }
},
"SpaceDetailsResponse": {
  "properties": {
    "owner": {
      "$ref": "#/definitions/spaces-owner"
    },
    "createdByName": {
      "type": "string",
      "example": "Satish Raj Kumar P"
    },
    "lastUpdatedBy": {
      "type": "string",
      "example": "rajks"
    },
    "accessType": {
      "type": "string",
      "example": "PUBLIC"
    },
    "memberCount": {
      "type": "string",
      "example": "2"
    },
    "description": {
      "type": "string",
      "example": "Test23"
    },
    "spacehierarchy": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/spaces-spacehierarchy"
      }
    },
    "createdBy": {
      "type": "string",
      "example": "rajks"
    },
    "createTime": {
      "type": "string",
      "example": "20181227T133933.157 GMT"
    },
    "members": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/spaces-members"
      }
    },
    "name": {
      "type": "string",
      "example": "Test23"
    },
    "ID": {
      "type": "string",
      "example": "PEGASOCIAL-GROUP SPACE-2090"
    },
    "lastUpdatedByName": {
      "type": "string",
      "example": "Satish Raj Kumar P"
    },
    "lastUpdateTime": {
      "type": "string",
      "example": "20181227T133933.167 GMT"
    }
  }
},
"spaces-members": {
  "properties": {
    "name": {
      "type": "string",
      "example": "Satish Raj Kumar P"
    },
    "ID": {
      "type": "string",
      "example": "rajks"
    },
    "position": {
      "type": "string",
      "example": "Principle Software Engineer"
    },
    "type": {
      "type": "string",
      "example": "OWNER"
    },
    "key": {
      "type": "string",
      "example": "DATA-ADMIN-OPERATOR-ID RAJKS"
    },
    "status": {
      "type": "string",
      "example": "APPROVED"
    }
  }
},
"LeaveOrJoinSpaceResponse": {
  "properties": {
    "success": {
      "type": "string",
      "example": "true"
    }
  }
},
"SpacePinsResponse": {
  "properties": {
    "entryCount": {
      "type": "string",
      "example": "3"
    },
    "pins": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/spaces-pins"
      }
    }
  }
},
"spaces-pins": {
  "properties": {
    "pinType": {
      "type": "string",
      "example": "Space"
    },
    "pinnedItem": {
      "type": "string",
      "example": "PEGASOCIAL-GROUP SPACE-2092"
    },
    "pinTypeID": {
      "type": "string",
      "example": "PegaSocial-Group"
    },
    "createdBy": {
      "type": "string",
      "example": "ramcharan"
    },
    "createTime": {
      "type": "string",
      "example": "2019-01-09T13:48:51.000Z"
    },
    "name": {
      "type": "string",
      "example": "Test 25"
    },
    "ID": {
      "type": "string",
      "example": "LINK-ASSOCIATION-PIN PEGASOCIAL-GROUP SPACE-2092!PEGASOCIAL-GROUP SPACE-2090"
    }
  }
},
"AttachmentsUpload": {
  "properties": {
      "ID" : {
        "type" : "string",
        "description" : "ID received upon uploading a file using POST /attachments/upload"
      }
  }
},
"AddAttachmentRequest": {
  "properties": {
      "attachments" : {
        "type" : "array",
        "$ref": "#/definitions/AttachmentRequest"
      }
  }
},
"AttachmentRequest": {
  "properties": {
    "type": {
      "type": "string",
      "example": "File",
      "enum": [
     			"File",
     			"URL"
       ],
      "description": "Type of attachment"
    },
    "category": {
      "type": "string",
      "example": "File",
      "description": "Attachment category"
    },
    "name": {
      "type": "string",
      "example": "myFile",
      "description": "File name."
    },
    "ID": {
      "type": "string",
      "example": "213e8449-102e-492d-b883-afdf64da0d78",
      "description": "Uploaded file id"
    },
    "url": {
      "type": "string",
      "example": "www.somewebsite.com",
      "description": "Link of URL type attachment"
    }
  }
},
"AttachmentListResponse": {
  "properties": {
      "attachments" : {
        "type" : "array",
        "items" : {
          "$ref": "#/definitions/AttachmentListItem"
        }
      }
  }
},
"AttachmentListItem": {
  "properties": {
    "extension": {
      "type": "string",
      "example": "docx",
      "description": "File extension"
    },
    "fileName": {
      "type": "string",
      "example": "myDoc.docx",
      "description": "File name"
    },
    "createdBy": {
      "type": "string",
      "example": "operator1",
      "description": "Attachment attached by"
    },
    "createTime": {
      "type": "string",
      "example": "2020-05-14T15:01:38.932Z",
      "description": "Attachment attached on"
    },
    "links": {
      "$ref": "#/definitions/AttachmentLinks"
    },
    "ID": {
      "type": "string",
      "example": "LINK-ATTACHMENT OPTRDJ-LOCALAPP-WORK I-2007!20200514T150138.932 GMT",
      "description": "Attachment identifier"
    },
    "category": {
      "type": "string",
      "example": "File",
      "description": "Attachment category"
    },
    "type": {
      "type": "string",
      "example": "FILE",
      "description": "Type of attachment"
    }
  }
},
"AttachmentLinks": {
  "properties": {
    "download/delete": {          
      "$ref": "#/definitions/AttachmentLink"
    }
  }
},
"AttachmentLink": {
  "properties": {
    "rel": {
      "type": "string",
      "example": "self",
      "description": "Relation of this link to attachment"
    },
    "href": {
      "type": "string",
      "example": "/attachments/LINK-ATTACHMENT OPTRDJ-LOCALAPP-WORK I-2007!20200514T150138.932 GMT",
      "description": "Endpoint"
    },
    "title": {
      "type": "string",
      "example": "Download the attachment",
      "description": "Title of the link"
    },
    "type": {
      "type": "string",
      "example": "GET/DELETE",
      "description": "Endpoint method"
    }
  }
},
"AttachmentCategories": {
  "properties": {
    "attachment_categories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttachmentCategory"
      }
    }
  }
},
"AttachmentCategory": {
  "properties": {
    "name": {
      "type": "string",
      "example": "Custom file category",
      "description": "Name of attachment category"
    },
    "ID": {
      "type": "string",
      "example": "CustomFileCategory",
      "description": "ID of attachment category"
    },
    "canView": {
      "type": "boolean",
      "example": "true",
      "description": "User has access to view attachment of this category"
    },
    "canDeleteOwn": {
      "type": "boolean",
      "example": "true",
      "description": "User has access to delete attachment(added by same user) of this category"
    },
    "canEdit": {
      "type": "boolean",
      "example": "true",
      "description": "User has access to edit attachment of this category"
    },
    "canCreate": {
      "type": "boolean",
      "example": "true",
      "description": "User has access to add attachment of this category"
    },
    "canDeleteAll": {
      "type": "boolean",
      "example": "true",
      "description": "User has access to delete attachment of this category"
    }
  }
},
"AttachmentErrorResponse_400": {
	"properties": {
		"errorClassification": {
			"type": "string",
			"example": "Invalid inputs"
		},
		"localizedValue": {
			"type": "string",
			"example": "<>"
		},
    "errorDetails": {
      "type": "array",
      "items": {
				"$ref": "#/definitions/AttachmentError"
			}
    }
	}
},
"AttachmentErrorResponse_403": {
	"properties": {
		"errorClassification": {
			"type": "string",
			"example": "Insufficient security"
		},
		"localizedValue": {
			"type": "string",
			"example": "<>"
		},
    "errorDetails": {
      "type": "array",
      "items": {
				"$ref": "#/definitions/AttachmentError"
			}
    }
	}
},
"AttachmentErrorResponse_404": {
	"properties": {
		"errorClassification": {
			"type": "string",
			"example": "Resource not found"
		},
		"localizedValue": {
			"type": "string",
			"example": "<>"
		},
    "errorDetails": {
      "type": "array",
      "items": {
				"$ref": "#/definitions/AttachmentError"
			}
    }
	}
},
"AttachmentErrorResponse_424": {
	"properties": {
		"errorClassification": {
			"type": "string",
			"example": "Dependent resource fail"
		},
		"localizedValue": {
			"type": "string",
			"example": "<>"
		},
    "errorDetails": {
      "type": "array",
      "items": {
				"$ref": "#/definitions/AttachmentError"
			}
    }
	}
},
"AttachmentErrorResponse_500": {
	"properties": {
		"errorClassification": {
			"type": "string",
			"example": "Internal server error"
		},
		"localizedValue": {
			"type": "string",
			"example": "<>"
		},
    "errorDetails": {
      "type": "array",
      "items": {
				"$ref": "#/definitions/AttachmentError"
			}
    }
	}
},
"AttachmentError": {
	"properties": {
		"message": {
			"type": "string",
			"example": "Error_"
		},
		"localizedValue": {
			"type": "string",
			"example": "<>"
		},
		"errorCode": {
			"type": "string",
			"example": ""
		},
		"errorCodeLabel": {
			"type": "string",
			"example": ""
		},
		"errorClassification": {
			"type": "string",
			"example": ""
		},
		"erroneousInputOutputFieldInPage": {
			"type": "string",
			"example": ""
		},
		"erroneousInputOutputIdentifier": {
			"type": "string",
			"example": ""
		},
    "messageParameters": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "messageDetails": {
			"type": "string",
			"example": ""
		}
	}
},
		
		
			
		
				
		

		"ErrorResponse": {
			"properties": {
				"pxObjClass": {
					"type": "string",
					"example": "Pega-API"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Error"
					}
				}
			}
		}, "Error": {
			"properties": {
				"ID": {
					"type": "string",
					"example": "Pega_API_XXX"
				},
				"message": {
					"type": "string",
					"example": "<>"
				},
				"pxObjClass": {
					"type": "string",
					"example": "Pega-API-Error"
				}
			}
		}
	}
}